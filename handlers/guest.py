from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from filters.user import IsNotRegistered
from keyboards.callback_factory import ActionCallbackFactory
from keyboards.inline import register, back_button
from utils.db import add_user_ya, add_user_wb
from utils.wb_api import wb_check_token
from utils.ya_api import checkToken as ya_check_token

guest_router = Router()
guest_router.message.filter(IsNotRegistered())
guest_router.callback_query.filter(IsNotRegistered())


class States(StatesGroup):
    input_wb_jwt = State()
    input_ya_id = State()
    input_ya_token = State()


@guest_router.message(Command("start"))
async def handler(message: Message, state: FSMContext):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç!\n"
                         f"–ü–æ—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                         f"–ì–¥–µ –≤—ã —Ç–æ—Ä–≥—É–µ—Ç–µ?", reply_markup=await register())
    await state.clear()


@guest_router.callback_query(ActionCallbackFactory.filter(F.action == "exit"))
async def handler(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()
    except:
        pass
    try:
        await call.message.delete_reply_markup()
    except:
        pass


@guest_router.callback_query(ActionCallbackFactory.filter(F.action == "register_wb"))
async def handler(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete_reply_markup()
    except:
        pass
    await state.set_state(States.input_wb_jwt)
    await call.message.answer(f"üëã –ë—Ä–∞—Ç!\n"
                              f"–í–≤–µ–¥–∏ —Å–≤–æ–π jwt:", reply_markup=await back_button())


@guest_router.message(States.input_wb_jwt)
async def handler(message: Message, state: FSMContext):
    try:
        is_token_valid = await wb_check_token(message.text)
    except:
        is_token_valid = False

    if is_token_valid:
        await add_user_wb(message.from_user.id, message.text)
        await message.answer(f"üëã C–ø–∞—Å–∏–±–æ!\n"
                             f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–ø–µ—Ä—å –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ WB")
        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç\n"
                             f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=await back_button())


@guest_router.callback_query(ActionCallbackFactory.filter(F.action == "register_ya"))
async def handler(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete_reply_markup()
    except:
        pass
    await state.set_state(States.input_ya_id)
    await call.message.answer(f"üëã –•–∞—É–¥–∏ –•–æ!\n"
                              f"–í–≤–µ–¥–∏ —Å–≤–æ–π id:", reply_markup=await back_button())


@guest_router.message(States.input_ya_id)
async def handler(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                             f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫:", reply_markup=await back_button())
        return
    await state.update_data({"ya_id": message.text})
    await state.set_state(States.input_ya_token)
    await message.answer(f"üëã –°–ø–∞—Å–∏–±–æ!\n"
                         f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π token:", reply_markup=await back_button())


@guest_router.message(States.input_ya_token)
async def handler(message: Message, state: FSMContext):
    data = await state.get_data()
    ya_id = data.get("ya_id")
    try:
        is_token_valid = await ya_check_token(business_id=ya_id, oauth_token=message.text)
    except:
        is_token_valid = False
    if is_token_valid:
        await add_user_ya(message.from_user.id, message.text, ya_id)
        await message.answer(f"üëã C–ø–∞—Å–∏–±–æ!\n"
                             f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ–ø–µ—Ä—å –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç")
        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç\n"
                             f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=await back_button())
